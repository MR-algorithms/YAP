#include "ReceiveData.h"

#include "Implement/DataObject.h"
#include "Client/DataHelper.h"
#include "rawdata.h"

using namespace Yap;
using namespace std;

ReceiveData::ReceiveData() : ProcessorImpl(L"ReceiveData")
{
    AddInput(L"Input",   YAP_ANY_DIMENSION, DataTypeFloat | DataTypeComplexFloat);
    AddOutput(L"Output", YAP_ANY_DIMENSION, DataTypeFloat | DataTypeComplexFloat);
}

ReceiveData::ReceiveData(const ReceiveData &rhs) :  ProcessorImpl(rhs)
{
    //LOG_TRACE(L"NiuMriDisplay2D constructor called.", L"NiuMri");
}

bool ReceiveData::Input(const wchar_t * port, IData *data)
{
    if (wstring(port) != L"Input")
        return false;

    StoreData(data);

    ProcessData();

    return true;

}

bool ReceiveData::StoreData(Yap::IData *data)
{
    if(!IsFinished(data))
    {
        if(!_rawdata.Ready())
        {
            InitScanData(data);
            InsertPhasedata(data);
        }
        else
        {
            InsertPhasedata(data);
        }
    }

    //Start thread if the processing thread does not running;
    //Send stop event if necessary.
    return true;
}

bool ReceiveData::ProcessData()
{
    for(int index = 0; index < _rawdata.MaxChannelCount(); index ++)
    {
        if(_rawdata.NeedProcess(index))
        {
            Databin::ChannelData channel_data;//copy from databin.
            FetchData(channel_data, index);

            CreateOutData(channel_data);
        }
    }

    return true;
}

bool ReceiveData::IsFinished(Yap::IData *data) const
{
    //
    assert(data->GetVariables() != nullptr);

    VariableSpace variables(data->GetVariables());

    bool finished = variables.Get<bool>(L"Finished");
    return finished;

}


 bool ReceiveData::InitScanData(Yap::IData *data)
 {

    assert(data->GetVariables() != nullptr);

    VariableSpace variables(data->GetVariables());

    int freq_count = variables.Get<int>(L"freq_count");
    int phase_count = variables.Get<int>(L"phase_count");
    int slice_count = variables.Get<int>(L"slice_count");
    int channel_count = 1; //denote the possible max channel count.
    int channel_mask = variables.Get<int>(L"channel_mask");

    //Check if parameters in variables conform to the demension in data.

    _rawdata.Prepare(freq_count, phase_count, slice_count, channel_count, channel_mask);

    return true;
 }

int ReceiveData::GetChannelMaskindex(unsigned int channelMask, int channelIndex) const
{

    int channelIndexInMask = -1;
    bool used = false;
    if (channelMask & (1 << channelIndex))
    {
        used = true;
    }
    if(!used)
    {

    }
    else
    {
        for(int i = 0; i <= channelIndex; i ++)
        {
            if (channelMask & (1 << i))
            {
                channelIndexInMask ++;
            }
        }
    }
    return channelIndexInMask;

}
int ReceiveData::GetChannelCountUsed(unsigned int channelMask) const
{
    int count_max = sizeof(unsigned int) * 8;
    int countInMask = 0;
    for(int channel_index = 0; channel_index < count_max; channel_index ++)
    {
        if (channelMask & (1 << channel_index))
        {
            countInMask ++;
        }
    }
    return countInMask;
}

bool ReceiveData::InsertPhasedata(Yap::IData *data)
{

    assert(data->GetVariables() != nullptr);

    VariableSpace variables(data->GetVariables());

    int channel_index = variables.Get<int>(L"channel_index");
    int slice_index = variables.Get<int>(L"slice_index");
    int phase_index = variables.Get<int>(L"phase_index");

    //int channelMaskindex = GetChannelMaskindex(_dataInfo.channel_mask, channel_index);

    DataHelper helpler(data);
    assert(helpler.GetActualDimensionCount() == 1);
    assert(helpler.GetDataType() == DataTypeComplexFloat);
    auto source = GetDataArray<std::complex<float>>(data);
    int length = helpler.GetWidth();

    _rawdata.InsertPhasedata(source, length, channel_index, slice_index, phase_index);
    return true;
}




bool ReceiveData::CreateOutData(Databin::ChannelData &channel_data)
{
    unsigned int width = channel_data.freq_count;
    unsigned int height = channel_data.phase_count;
    unsigned int slice_count = channel_data.slice_count;
    unsigned int dim4 = channel_data.dim4;
    unsigned int dim5 = channel_data.dim5;


    Dimensions dimensions;
    dimensions(DimensionReadout, 0U, width)
        (DimensionPhaseEncoding, 0U, height)
        (DimensionSlice, 0U, slice_count)
        (Dimension4, 0U, dim4)
        (Dimension5, 0U, dim5)
        (DimensionChannel, channel_index, 1);


    complex<float> *channel_buffer = channel_data.data.data();

    //
    VariableSpace variables(_ref_data->GetVariables());
    variables.AddVariable(L"bool", L"test_data", L"test.");
    variables.Set(L"test_data", false);
    //

    auto output = CreateData<complex<float>>(_ref_data, channel_buffer, dimensions);

    Feed(L"Output", output.get());


    }

    return true;
}
ReceiveData::~ReceiveData()
{
//    LOG_TRACE(L"NiuMriDisplay2D destructor called.", L"NiuMri");
}
